<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="11.3">
  <zoom_level>5</zoom_level>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>0</x>
      <y>265</y>
      <w>200</w>
      <h>485</h>
    </coordinates>
    <panel_attributes>EXP_Class
--
- generatio : int
- from_gen : int
- to_gen : int
- genotype : int
- eval : int
- num_collision : int
- iter : int
- AGGREGATE_FITNESS : double
- fitnesses_mult : double
- evaluatoinal_min_fitness : vector&lt;double&gt;
- generational_avg_fitness : double
- generational_max_fitness : double
- generational_min_fitness : double
- FINAL_FITNESS : vector&lt;double&gt;
- centre: vector&lt;double&gt;
- Sensors_inputs : vector&lt;double&gt;
- motor_outputs : vector&lt;double&gt;
- ir_reading : vector&lt;double&gt;
- camera_sensor_readings : vector&lt;double&gt;
- evolution : bool
- matrix : int**
+ partial_fitness[] : double
+ *map : Occupancy_Map

--
+ EXP_Class(*run_name:const char, 
   _evolution:bool, _viewing:bool,
    _re_evaluation:bool, _seed:unsigned long, 
    _from_gen:int, _to_gen:int, _num_cores:int)

+ find_distance(&amp;_pos1:const vector&lt;double&gt;, 
    &amp;_pos2:const vector&lt;double&gt;) : double
+ init_local_variables() : void
+ init_evolutionary_run() : void
+ init_genotype_loop() : void
+ init_evaluations_loop() : void
+ init_single_evaluation() : void
+ set_agent_position() : void
+ from_genome_to_controllers(*str_source:const char, 
    which_genotype:const int) : void
+ adv() : void
+ assign_fitness_to_genotype() : void 
+ finalise_single_evaluation() : void
+ finalise_evaluations_loop() : void
+ finalise_genotypes_loop() : void
+ finalise_evolutionary_run() : void
+ stop_iterations_loop() : bool
+ stop_evaluations_loop() : bool
+ stop_genotypes_loop() : bool
+ stop_generations_loop() : bool
+ update_sensors() : void
+ update_controllers() : void
+ update_Actuators() : void
+ update_world() : void
+ manage_collisions() : void
+ compute_fitness() ; void
+ dump_statistics(*locationOfFileToDump:const char,
   *filename:const char, generation:int   ) : void
+ compute_fitness_each_step() : void
+ occupancy_reading() : void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>660</x>
      <y>265</y>
      <w>305</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>MyController
--
_- hiddenlayer_size : const static int_
_- high_bound : const static double_
_- low_bound : const static double_
- weights1[num_input+1:const static int][hiddenlayer_size:const static int] : double
- weights2[hiddenlayer_size+1:const static int][num_output:const static int] : double
- inputlayer : vector&lt;double&gt;
- outputlayer : vector&lt;double&gt;
- hiddenlayer : vector&lt;double&gt;
--
+ MyController()
+ init(&amp;genes:const vector&lt;chromosome_type&gt;) : void
+ step(&amp;input_array:const vector&lt;double&gt;, &amp;output_array:vector&lt;double&gt;) : double
+ compute_genotype_length() : void
+ read_from_file() : void
+ get_num_input() : void
+ get_num_output() : void
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>655</x>
      <y>0</y>
      <w>300</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Controller
--
# delta_t : double
_# num_input : const int_
_# num_output :  const int_
# genotype_length : int
--
+ Controller()
+ get_num_input() : int
+ get_num_output() : int
+ get_genotype_length() : int
+ set_genotype_length() : void
/+ init(&amp;genes:const vector&lt;chromosome_type&gt;) : void/
/+ step(&amp;input_array:const vector&lt;double&gt;, &amp;output_array:vector&lt;double) : void/

/+ reset() : void/
/+ read_from_file() : void/
/+ compute_genotype_length() : void/
+ get_value(&amp;genes:const vector&lt;double&gt;, counter : const int) : void 
+ get_value(&amp;genes:const vector&lt;int&gt;, counter:const int) : void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>800</x>
      <y>135</y>
      <w>24</w>
      <h>139</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>15;15;15;130</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>320</x>
      <y>265</y>
      <w>280</w>
      <h>485</h>
    </coordinates>
    <panel_attributes>Parameters
--
+ count : int
+ **collision_peer : int
+ num_collision_peet : int
+ num_bricks : int
+ num_cylinders : int
+ num_spheres : int
+ num_objects : int
+ num_lights : int
+ num_generations : int
+ num_evaluations : int
+ num_iterations : int
+ num_agents : int
+ dump_stats_every : int
+ dump_genome_every : int
+ simulation_time_step : double
+ physics_step : double
+ **objects_data : double
+ m_time : double
+ *run_name : char
+ statsFileDir[] : char
+ statsFileName[] : char
+ revalFileDir[] : char
+ genomeFileDir[] : char
+ genomeFileName[] : char
+ rootSeedFileDir[] : char
+ rootSeedFileName[] : char
+ genomeFileName_for_reval[] : char
+ type_of_ga[] : char
+ type_of_controller[] : char
+ m_clock : btClock
+ *collisionConfig : btCollisionConfiguration
+ *dispatcher : btDispatcher
+ *broadphase : btBroadphaseInterface
+ *world btDynamicsWorld 

+ **nets : MyController
+ **agent : SIMPLE_Agents
+ **object : SIMPLE_Objects
+ root_seed : unsigned long



+ *plane : SIMPLE_Objects
--
+ Parameters(*run_name:const char)


+ init_physics_param() : void
+ resetPhysicsState() : void
+ getDeltaTimeMicroseconds() : void
+ setDeltaTime(deltaTime btScalar) : void
+ myProcessCallback(timeStep:btScalar) : void
+ read_run_parameter_file(*run_name:const char) : void
+ init_random_generator() : void
+ init_controllers() : void
+ init_ga(num_allele_per_solution:const int, 
    num_bases_per_allele:const int) : void
+ init_objects() : void
+ init_agents() : void
+ dump_simulation_seed() : void
+ reset_seed() : void
+ set_random_root_seed(_seed:unsigned long) : void
+ get_random_root_seed() : void
+ get_run_name() : char*
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>185</x>
      <y>260</y>
      <w>144</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
r2=1</panel_attributes>
    <additional_attributes>15;15;135;15</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>585</x>
      <y>260</y>
      <w>84</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
r2=1..*</panel_attributes>
    <additional_attributes>15;15;75;15</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>760</x>
      <y>490</y>
      <w>105</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>SIMPLE_agent
--
# right_out : double
# left_out : double
# rotation : double
# simulation_time_step : double
# pos : vector&lt;double&gt;
# dim : vector&lt;double&gt;
# rot : vector&lt;double&gt;
# long_term : vector &lt;double&gt;
# medium_term : vector &lt;double&gt;
# frozen : bool
_# robot_slices : const int_
_# wheel_distance : const double_
_# half_wheel_distance : const double_
_# wheel_radius : const double_
_# robot_radius : const double_
_# robot_height : const double_
_# IR_range : const double_
_# max_IR_range : const double_
_# camera_ray : const double_
_# pos_noise : const double_
_# rot_noise : const double_
_# vel_noise : const double_
_# max_vel : const double_
_# min_vel : const double_
_# prob_long_term_change : const double_
_# prob_medium_term_change : const double_
_+ num_IR_sensors : const int_
_+ num_camera_rays_per_sectors : const int_
_+ num_camera_sectors : const int_
+ start_pos : vector&lt;double&gt;
+ vel : vector&lt;double&gt;
+ to1 : vector&lt;btVector3&gt;
+ from1 : vector&lt;btVecto3&gt;
+ to2 : vector&lt;btVector3&gt;
+ from2 : btVector3
+ randb_from : btVector3
+ randb_to : btVector3
+ *world : btDynamicsWorld
+ *body : btRigidBody
+ *right_wheel : btRigidBody
+ *left_wheel : btRigidBody
+ *left_hinge : btHingeConstraint
+ *right_hinge : btHingeConstraint

--
#Operation(i: int): int
+AbstractOperation()
--
Responsibilities
-- Resp1
*-- Resp2*</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
